:- use_argumentation_theory.
/*  Replacing with TimeObject rules which includes minutes
?event[timeObject -> ?year(?month(?day(?hour)))] :-
		?event :: Event,
		?event[startTime -> ?_startTime],
		?_startTime^^\dateTime[year -> ?_startYear, month -> ?_startMonth, day -> ?_startDay, hour -> ?_startHour]@\basetype,
		?event[endTime -> ?_endTime],
		?_endTime^^\dateTime[year -> ?_endYear, month -> ?_endMonth, day -> ?_endDay, hour -> ?_endHour]@\basetype,
		?hour :: Hour[day -> ?day],
		?day[month -> ?month],
		dayNum(?day, ?_dayNum),
		?month[year -> ?year],
		?month[monthNum -> ?_monthNumber],
		?_startYear =< ?year,
		?_startMonth =< ?_monthNumber,
		?_startDay =< ?_dayNum,
		?_startHour =< ?hour,
		?_endYear >= ?year,
		?_endMonth >= ?_monthNumber,
		?_endDay >= ?_dayNum,
		?_endHour >= ?hour.

?event[day -> ?monthNumber(?day)] :-
		?event :: Event,
		?event[startTime -> ?_startTime],
		?_startTime^^\dateTime[year -> ?_startYear, month -> ?_startMonth, day -> ?_startDay]@\basetype,
		?day :: Day[month -> ?_month],
		dayNum(?day, ?_dayNum),
		?_month[year -> ?_Year],
		?_month[monthNum -> ?monthNumber],
		?_startYear == ?_Year,
		?_startMonth == ?monthNumber,
		?_startDay == ?_dayNum.

?event[hour -> ?day(?hour)] :-
		?event :: Event,
		?event[startTime -> ?_startTime],
		?_startTime^^\dateTime[year -> ?_startYear, month -> ?_startMonth, day -> ?_startDay, hour -> ?_startHour]@\basetype,
		?event[endTime -> ?_endTime],
		?_endTime^^\dateTime[year -> ?_endYear, month -> ?_endMonth, day -> ?_endDay, hour -> ?_endHour]@\basetype,
		?hour :: Hour[day -> ?day],
		?day[month -> ?_Month],
		dayNum(?day, ?_dayNum),
		?_Month[year -> ?_Year],
		?_Month[monthNum -> ?_monthNumber],
		?_startYear =< ?_Year,
		?_startMonth =< ?_monthNumber,
		?_startDay =< ?_dayNum,
		?_startHour =< ?hour,
		?_endYear >= ?_Year,
		?_endMonth >= ?_monthNumber,
		?_endDay >= ?_dayNum,
		?_endHour >= ?hour.
		

?employee[hour -> ?day(?hour)] :-
		?employee :: Employee,
		?hour :: Hour,
		?day :: Day,
			(
				(
					?employee[unavailable -> ?_event],
					\naf ?_event[hour -> ?day(?hour)]
				) ;
				(
					hasNoUnavailable(?employee)
				)
			),
			(
				(
					?employee[shifts -> ?_shift],
					\naf ?_shift[hour -> ?day(?hour)]
				) ;
				(
					hasNoShifts(?employee)
				)
			).

*/			
hasNoUnavailable(?employee) :-
	?employee :: Employee,
	\if (countOfHolidaysByEmployee(?employee, ?_number) )
	\then (\false)
	\else (\true).
	
countOfHolidaysByEmployee(?emp, ?number) :-
	?_events = setof{?_event[?_employee] | ?_employee[unavailable -> ?_event] },
	?_employee :: Employee,
	?emp \is ?_employee,
	?_events[length -> ?number]@\btp.
			

hasNoShifts(?employee) :-
	?employee :: Employee,
	\if (countOfshifsByEmployee(?employee, ?_number) )
	\then (\false)
	\else (\true).
		
		
countOfshifsByEmployee(?emp, ?number) :-
	?number= count{?_shift[?_employee] | ?_employee[shifts -> ?_shift] },
	?_employee :: Employee,
	?emp \is ?_employee.
			
		
shiftsAvailableForEmployee(?date, ?employee, ?shift) :-
	?_employeeTimes = setof{ ?_eTimes[?employee] | datesAvailableForEmployee(?_eTimes, ?employee), ?employee :: Employee },
	?_shiftTimes = setof{ ?_sTimes[?shift] | ?shift[timeObject -> ?_sTimes], ?shift :: Shift},
	?_shiftTimes \subset ?_employeeTimes,
	?shift[timeObject -> ?date].
	
@{all_available}
datesAvailableForEmployee(?date, ?employee) :-
	?employee :: Employee,
	?employee[timeObject -> ?date].

@{unavailable}
\neg datesAvailableForEmployee(?date, ?employee) :-
	?employee :: Employee,
	?employee[timeObject -> ?date],
	?employee[unavailable -> ?_event],
	?_event :: Event,
	?_event[timeObject -> ?date].

\overrides(unavailable,all_available).	

	/*
	
	?_employeeTimes = setof{ ?_eTimes | ?employee[timeObject -> ?_eTimes]}, ?_unAvailTime = setof{ ?_uTimes | ?employee[unavailable -> ?_event], ?_event :: Event, ?_event[timeObject -> ?_uTimes] }, ?_unAvailTime \subset ?_employeeTimes.
	
	,
	setof{ ?time | ?employee :: Employee, ?employee[timeObject -> ?time] }.
	(
		(
			hasNoUnavailable(?employee)
		);
		(
			\naf hasNoUnavailable(?employee),
			?employee[unavailable -> ?_event],
			?_event :: Event,
			?_event[timeObject -> ?_year(?_month(?_day(?_hour(?))))]
			//,
			//?_year(?_month(?_day(?_hour(?)))) !== ?_oYear(?_oMonth(?_oDay(?_oHour(?))))
		)
	).

	*/
employeeAvailableTime(?employee, ?totalTime) :-
	\if ( ?_totTime \is count{ ?_date[?employee] | ?employee :: Employee, shiftsAvailableForEmployee(?_date, ?employee, ?)} )
	\then ?totalTime \is ?_totTime
	\else ?totalTime \is 0.
	
allShiftsSet(?shift, ?employees) :-
	?employees = setof{ ?_employee[?shift] | shiftsAvailableForEmployee(?_date, ?_employee, ?shift) }.
	
allNoPreferenceShiftsSet(?shift, ?employees) :-
	?employees = setof{ ?_employee[?shift] | shiftsAvailableForEmployee(?_date, ?_employee, ?shift), \naf preferenceScore(?, ?shift, ?) }.	

	
allPreferenceShiftsSet(?shift, ?employees) :-
	?employees = setof{ ?_employee[?_oShift] | MaxScoreByEmployeeAndShift(?_oShift, ?_employee, ?)},
	?_oShift :: Shift,	
	?shift \is ?_oShift.		
	
MaxScoreByEmployeeAndShift(?shift, ?employee, ?score) :-
	?score = max{ ?_score[?_employee, ?_oShift] | shiftsAvailableForEmployee(?, ?_employee, ?_oShift), preferenceScore(?_employee, ?_oShift, ?_score) },
	?_oShift :: Shift,	
	?employee \is ?_employee,
	?shift \is ?_oShift.	
		
	
employeeOnlyAvailableShiftHours(?employee, ?totalHours) :-
	?employee :: Employee,
	\if (?_testTotalHours \is count{ ?_date[?_emp] | shiftsAvailableForEmployee(?_date, ?_emp, ?_shift), allShiftsSet(?_shift, ?_employees), ?_employees[length -> 1]@\btp}, ?_emp :: Employee, ?employee == ?_emp)
	\then (?totalHours \is ?_testTotalHours )
	\else (?totalHours \is 0 ).

	
// when using this rule we expect shift and employees to be provided.
/*
%pickARandomWinner(?winnerEmp, ?shift, ?employees) :-
		?shift :: Shift,
		%lowestAssignedEmp(?employees, ?_oEmployee),
		?winnerEmp \is ?_oEmployee,
		insert{stealth{%winners(?winnerEmp, ?shift, ?employees)}}.

// current problem is that min grouped by employee.  Need to think of a way to get a list of mins.
// instead of min, perhaps get a set of percentages grouped by employees and order desc then take the 1 spot.
%lowestAssignedEmp(?lowestEmployees, ?lowestEmployee) :-
	?_percentage \is min{ ?_percentage | %employeePercentageOfAssigned(?, ?_percentage)},
	?_empsWithLowestPercentage = setof{ ?_lowestEmp | %employeePercentageOfAssigned(?_lowestEmp, ?_percentage)},
	pickFirst(?_empsWithLowestPercentage, ?_firstLowestEmp),
	?_firstLowestEmp :: Employee,
	?lowestEmployees[member(?_firstLowestEmp)]@\btp,
	?lowestEmployee \is ?_firstLowestEmp.

	
pickFirst(?list, ?firstItem) :-
		?list[ith(1) -> ?firstItem]@\btp.
	
*/	
// apprently ergo is div by zero safe by default!  sweet deal.
/*
%employeePercentageOfAssigned(?employee, ?percentage) :-
	(
		?employee :: Employee,
		employeeAvailableHours(?employee, ?_totalAvailableHours),
		(
			?_totalAvailableHours == 0,
			?percentage \is 1
		) ;
		(
			%assignedWinnerHours(?employee, ?_totalAssignedHours),
			employeeOnlyAvailableShiftHours(?employee, ?_totalHours),
			employeeAvailableHours(?employee, ?_totalAvailableHours),
			?percentage \is (?_totalAssignedHours + ?_totalHours) / ?_totalAvailableHours
		)
	).


%assignedShiftsForEmployee(?date, ?employee, ?shift) :-
	%winners(?employee, ?shift, ?_employees),
	?shift :: Shift,
	?shift[timeObject -> ?date].	
	
%assignedWinnerHours(?employee, ?totalHours) :-
	?employee :: Employee,
	\if (?_totHours \is count{ ?_date[?_emp] | %assignedShiftsForEmployee(?_date, ?_emp, ?)}, ?_emp :: Employee,?employee == ?_emp)
	\then (?totalHours \is ?_totHours)
	\else (?totalHours \is 0).
*/	
// todo prove: 
// identifyPreferences

// only available should be assigned first as it's the most important if there are limited hours for each person.
/*
@{only_available}
%assignShifts(?shift, ?pickEmp) :-
	 allShiftsSet(?shift, ?_employees),
		(
			(
				?_employees[length -> 1]@\btp,
				?_employees[ith(1) -> ?pickEmp]@\btp,
				insert{stealth{%winners(?pickEmp, ?shift, ?_employees)}}
			)
		).


@{multiple_available_no_preference}
%assignShifts(?shift, ?pickEmp) :-
	 allNoPreferenceShiftsSet(?shift, ?_employees),
		(
			(
				?_employees[length -> ?_NumberOfMatches]@\btp,
				?_NumberOfMatches >= 2,
				%pickARandomWinner(?pickEmp, ?shift, ?_employees)
			)
		).

@{preference}
%assignShifts(?shift, ?pickEmp) :-
	 allPreferenceShiftsSet(?shift, ?_employees),
		(
			(
				?_employees[length -> 1]@\btp,
				?_employees[ith(1) -> ?pickEmp]@\btp
			);
			(
				?_employees[length -> ?_NumberOfMatches]@\btp,
				?_NumberOfMatches >= 2,
				%pickARandomWinner(?pickEmp, ?shift, ?_employees)
			)
		).

		
\overrides(only_available,preference).
\overrides(preference,multiple_available_no_preference).		
*/

/* experiment gone wrong
fullListOfPossibleAssignments(?employee, ?compatibleShifts) :-
	?_startList \is setof(?_shift | shiftsAvailableForEmployee(?, ?employee, ?_shift) ), 
	(
		(
			?_startList[length -> 1],
			?compatibleShifts \is ?_startList
		) ;
		(
			?_startList[length -> 2],
			?_startList[ith(1) -> ?_shift1],
			?_startList[ith(2) -> ?_shift2],
			shiftsCanBeAssignedTogehter(?_shift1, ?_shift2),
			?compatibleShifts \is [?_shift1, ?_shift2]
		) ;
		(
			?_startList[length -> 2],
			?_startList[ith(1) -> ?_shift1],
			?_startList[ith(2) -> ?_shift2],
			\naf shiftsCanBeAssignedTogehter(?_shift1, ?_shift2),
			?compatibleShifts \is [?_shift1]
		) ;
		(
			?_startList[length -> ?_X],
			?_X >= 3,
			compatibleShifts(?employee, ?_shift, ?_compShifts),
		)
	
	).
*/

	//returns all possible lists
%shiftAssignmentItteration(?employee, ?shift, ?compShifts, ?remainingList, ?finalList) :-	
	compatibleShifts(?employee, ?shift, ?oCompShifts),
	?totalShifts \is ?oCompShifts && ?remainingList,
	\if (
			?totalShifts[length -> ?size]@\btp, 
			?size >= 3
		)
	\then 
		(
			?totalShifts[ith(?_C) -> ?_firtCompShift]@\btp, 
			?_currShifts \is [?shift] ++ ?compShifts,
			// sorting here to remove duplicates
			?_currShifts[sort -> ?_sortedCurrShifts]@\btp,
			%shiftAssignmentItteration(?employee, ?_firtCompShift, ?_sortedCurrShifts, ?totalShifts, ?finalList)
		)
	\else 
		(
			\if (
					?totalShifts[length -> ?size]@\btp, 
					?size >= 2,
					?totalShifts[ith(1) -> ?_secondCompShiftOne]@\btp,
					?totalShifts[ith(2) -> ?_secondCompShiftTwo]@\btp,
					shiftsCanBeAssignedTogehter(?_secondCompShiftOne, ?_secondCompShiftTwo)
				)
			\then 
				(
					//adding sort logic
					?_finalListNeedsSorting \is [?shift] ++ [?_secondCompShiftOne] ++ [?_secondCompShiftTwo] ++ ?compShifts,
					?_finalListNeedsSorting[sort -> ?finalList]@\btp
				)
			\else
				(
					\if (
							?totalShifts[length -> ?size]@\btp, 
							?size >= 1
						)
					\then
						(
							?totalShifts[ith(?_X) -> ?_independentShift]@\btp,
							?_finalListNeedsSorting \is [?shift] ++ [?_independentShift] ++ ?compShifts,
							?_finalListNeedsSorting[sort -> ?finalList]@\btp
						)
					\else
						(
							?_finalListNeedsSorting \is [?shift] ++ ?compShifts,
							?_finalListNeedsSorting[sort -> ?finalList]@\btp
						)
					
				)			
		).
	
	

compatibleShifts(?employee, ?shift, ?compatablieShifts) :-
	(
		?compatablieShifts = setof{ ?_shift[?employee, ?shift] | 	?_shift :: Shift, 
																shiftsAvailableForEmployee(?, ?employee, ?_shift), 
																shiftsCanBeAssignedTogehter(?_shift, ?shift),
																shiftsAvailableForEmployee(?, ?employee, ?shift)
							}
	);
	(
		shiftsAvailableForEmployee(?, ?employee, ?shift), 
		?compatablieShifts \is []
	).
/*	
@{singleCompatible}
compatibleShifts(?employee, ?shift, ?compatablieShifts) :-
	shiftsAvailableForEmployee(?, ?employee, ?shift), 
	?compatablieShifts \is [].
*/
//\overrides(multipleCompatible,singleCompatible).	

allShiftsToPerson(?person, ?shiftsLists) :-
	?shiftsLists = setof{ ?_shifts[?person] | ?_remainingList = setof{?_shift | ?_shift :: Shift},  
	?_X \is [],
	%shiftAssignmentItteration(?person, ?_shift, ?_X, ?_remainingList, ?_shifts) }.

	
singleShiftToPerson(?person, ?shifts) :-
	?_remainingList = setof{?_shift | ?_shift :: Shift},  
	?_X \is [],
	%shiftAssignmentItteration(?person, ?_shift, ?_X, ?_remainingList, ?shifts).

personToShiftCombo(?personShift) :-
	(
		allShiftsToPerson(?_person, ?_shiftsLists),
		[?_shift] \subset ?_shiftsLists,
		?personShift = ?_person(?_shift)
	);
	(
		shiftsAvailableForEmployee(?, ?_person, ?),
		?_noshifts \is [],
		?personShift = ?_person(?_noshifts)
	).
/*
@{noShifts}	 
personToShiftCombo(?personShift) :-
	.	 
*/
//\overrides(noShifts,allPossibleShifts).	

%uniquePersonShiftCombos(?tempList, ?personShifts) :-
	?_allPeople = setof{ ?_person | shiftsAvailableForEmployee(?, ?_person, ?)},
	\if (
			?tempList[length -> ?_currlistSize]@\btp, 
			?_allPeople[length -> ?_numPeople]@\btp, 
			?_currlistSize >= ?_numPeople
		)
	\then
		(
			?tempList[sort -> ?_personShiftTemp]@\btp ,
			%eachPersonShiftComboScore(?_personShiftTemp, ?_score),
			?_score >= 0,
			?personShifts = ?_score(?_personShiftTemp)
		)
	\else
		(
			?_currentPers = setof{ ?_currPersons | [?_currPersons(?_currShifts)] \subset ?tempList },
			?_currentShifts = setof{ ?_currShifts | [?_currPersons(?_currShifts)] \subset ?tempList },
			?_singleListShifts = setof{ ?_sShift | [?_currSingleShifts] \subset ?_currentShifts, [?_sShift] \subset ?_currSingleShifts }, 
			?_remainIngPers \is ?_allPeople -- ?_currentPers,
			?_remainIngPers[ith(1) -> ?_nextPers]@\btp,
			// attempting to optimize
			//[?_nextPers] \subset ?_remainIngPers,
			personToShiftCombo(?_nextPers(?_shifts)),
			doesNotConitainDuplicateShift(?_singleListShifts, ?_shifts),
			?_runningList \is ?tempList ++ [?_nextPers(?_shifts)],
			?_runningList[sort -> ?_sortedRunningList]@\btp,
			%uniquePersonShiftCombos(?_sortedRunningList, ?personShifts)
		).
	
eachPersonShiftCombo(?eachPersonShift) :-
 	?_tempList \is [],
	%uniquePersonShiftCombos(?_tempList, ?eachPersonShift).
	
identifyScore(?scoreShift) :-
	?scoreShift = setof{ ?_scoreShift(asc) | 
		eachPersonShiftCombo(?personShift), 
		%eachPersonShiftComboScore(?personShift, ?_score),
		?_scoreShift = ?_score(?personShift)
	}.
	
	
//determine Score
%eachPersonShiftComboScore(?personShift, ?score)	 :-
	?_preferenceCount = sum {  ?_score | 
		[?_person(?_shifts)] \subset ?personShift, 
		[?_shift] \subset ?_shifts, 
		preferenceScore(?_person, ?_shift, ?_score)
	},
	?_assignedCount = sum {  ?_score | 
		[?(?_shifts)] \subset ?personShift, 
		[?_shift] \subset ?_shifts, 
		shiftScore(?_shift, ?_score)
	},
	?_missingCount = sum {  ?_score | 		
		?_currentShifts = setof { ?_currShifts | 
			[?(?_currShifts)] \subset ?personShift 
		},
		?_singleListShifts = setof{ ?_sShift | 
			[?_currSingleShifts] \subset ?_currentShifts, 
			[?_sShift] \subset ?_currSingleShifts 
		}, 
		missingShiftScore(?_singleListShifts, ?_score)
	},
	?_consistentSchedule = sum {  ?_score | 
		[?_person(?_shifts)] \subset ?personShift,
		[?_shiftOne] \subset ?_shifts,
		[?_shiftTwo] \subset ?_shifts,
		consistentScheduleScore(?_shiftOne, ?_shiftTwo, ?_score)
	},
	?_evenDistributionScore = sum {  ?_score |
		evenDistributionScore(?personShift, ?_score)
	},
	?_noAssignedShiftsScore = sum {  ?_score |
		[?_person(?_shifts)] \subset ?personShift,
		noassignedShifts(?_person, ?_shifts, ?_score)
	},
	?score \is ( ?_preferenceCount + ?_assignedCount - ?_missingCount + ?_consistentSchedule + ?_evenDistributionScore - ?_noAssignedShiftsScore)
	.
	
	
oneResultforEachPersonShiftCombo(?reults) :-
	?reults = setof{ ?_personShiftList  |  allShiftsToPerson(?_person, ?_shiftsLists),  ?_shiftList \subset ?_shiftsLists, ?_personShiftList = ?_person(?_shiftList) } .
	
	
// one result per person all Shifts
personOwnShiftCombos(?person(?shifts)) :-
	allShiftsToPerson(?person, ?shifts).

// Single result each grouped by person and a list of shifts	
singleListPersonShiftCombo(?personAllShifts) :-
	?personAllShifts = setof{ ?_personShifts | personOwnShiftCombos(?_personShifts)}.	
 
 /*
noEasyWayToDoThis(?person(?shifts), ?runningList, ?person, ?shifts) :-
	?_oPerson :: Employee,
	allShiftsToPerson(?_person, ?_shifts),
	?_shift \subset ?_shifts,
*/	
	
	
	//to do
doesNotConitainDuplicateShift(?currentShifts, ?newShifts) :-
		(
			?currentShifts[length -> ?_X]@\btp,
			?_X == 0
		);
		(
			?newShifts[length -> ?_N]@\btp,
			?_N == 0
		);
		(
			?_numberOfMatchesCurrToNew = count{ ?_S | [?_S] \subset ?currentShifts, [?_S] \subset ?newShifts},
			?_numberOfMatchesCurrToNew == 0
		).

/*

doesNotConitainDuplicateShift([twoMorningShift, thirdMorningShift, fourthMorningShift, oneMorningShift], [thirdLateShift, twoMorningShift]).

uniquePeopleShiftCombos(?personShifts) :-
	?personShifts = setof{ ?_personShift |
		personToUniqueShiftCombos(?_personShifts),
		(?_person(?_shifts)) \subset ?_personShifts
		

	}.
	 
*/	
	
/*	
listSplitter(?inputList, ?outputList) :-
	[?_X] \subset ?inputList,
	?_templist = ?inputList -- [?_X],
	?outputList = [?_templist, [?_X]]
	\if (
			?_templist[length -> ?_size],
			?_size >= 3
		)
	\then
		(
			listSplitter(?inputList, ?outputList)
		)
	\else
		(
		).
*/
		
// trying to think about how to find combinations of shifts assigned to people that are unique	
uniquePersonShifts(?person, ?shifts) :- 
	allShiftsToPerson(?person, ?shifts),
	\naf allShiftsToPerson(?_oPerson, ?shifts),
	?person !== ?_oPerson.


/*  This never worked 	
%assignAndCheckForConlifcts(?pickEmp, ?shift, ?_employees) :-	
	forall(?_Oshift)^( %winners(?pickEmp, ?_Oshift, ?) ~~> shiftsCanBeAssignedTogehter(?_Oshift, ?shift) ),
	insert{stealth{%winners(?pickEmp, ?shift, ?_employees)}}.
*/

/* 
approach to making a list based on the size of a different list for a while loop.
	compatableShifts(?employee, ?shift, ?compatablieShifts), 
?X = setof{ ?_Y | ?compatablieShifts[ith(?_Y) -> ?_D]@\btp }.

*/
/*  This is potentially too much work to solve.	
?employee[assignableShiftCombos -> ?shifts] :-
	compatibleShifts(?employee, ?_shift, ?_allShifts),
	(
		(
			?_allShifts[length -> 1]@\btp,
			?_allShifts[append([?_shift]) -> ?shifts]@\btp
		)
		
		;
		(
			?_allShifts[length -> ?_N]@\btp,
			?_N >= 2,
			ElemenateShift(?_allShifts, ?_N, ?_cleanerShifts),
			?_cleanerShifts[append([?_shift]) -> ?shifts]@\btp
		)
		
	).


attemptAtFacyWhile(?list, ?originalShifts, ?shifts) :-
	\while ?list >= 2
	\do ElemenateShift(?originalShifts, ?shifts, ?X, 1).

	
ElemenateShift(?originalShifts, ?shifts, ?X, ?Y) :-
	?originalShifts[ith(?X) -> ?_oShiftOne]@\btp,
	?originalShifts[ith(?Y) -> ?_oShiftTwo]@\btp,
	(
		(
			shiftsCanBeAssignedTogehter(?_oShiftTwo, ?_oShiftOne),
			?shifts = ?originalShifts
		);
		(
			\naf shiftsCanBeAssignedTogehter(?_oShiftTwo, ?_oShiftOne),
			?originalShifts[delete(?_oShiftOne) -> ?shifts]@\btp
		)
	).
		
		
	//?countHrs \is count{  ?_year(?_month(?_day(?_hour(?)))) | ?_Filler[timeObject ->  ?_year(?_month(?_day(?_hour(?))))]}.
/*	
	
	
/*TO-DO make this work

?employee[shiftCombo -> ?shifts[]] :-
	?employee :: Employee, 
	shiftsAvailableForEmployee(?, ?employee, ?_shift),
	?shifts[length -> 0]@\btp,
	?shifts[append -> ?_shift].


%shiftDoesNotViolateCibstraints(?employee, ?shift) :-
	?_currentShifts = setof{ ?_shift |  %winners(?employee, ?shift, ?) },
	[?_someShift] \subset ?_currentShifts
	// new rule that accepts two shifts and returns true if they're on the same day.
*/		
/*	 

	
assignment(?shift, ?oEmployee) :-
	?employee = max{?_employees | allShiftsSet(?shift, ?_employees)},
	?oEmployee :: Employee, 
	?oEmployee =:= ?employee.
	
		
AssignShifts(?shift),
	?_employee :: Employee, 
	?shift :: Shift, 
	\while
		%canBeAssigned(?_employee, ?shift)
	\do
		insert{stealth{%shifts(?_employee, ?shift)}}.
		
		
%canBeAssigned(?employee, ?shift) :-		
	(
		?shift :: Shift,
		\naf %shifts(?_oEmployee, ?shift),
		shiftsAvailableForEmployee(?_hour, ?_day, ?employee, ?shift),
	).
*/	
		