/*
		Shift
		[|
			day => Day,
			month => Month,
			year => Year,
			startTime => \dateTime,
			endTime => \dateTime,
			lengthHour => \integer

		|].
	\dateTime[toType(\integer,\integer,\integer,\integer,\integer,\integer,\decimal,
	\integer,\integer,\integer) => \dateTime]
	The meaning of the arguments is as follows (in that order): date sign (1 or -1), year, month,
	day, hour, minute, second, zone sign (1 or -1), zone hour, zone minute.
	
	?_date^^\dateTime[year -> ?_Y]@\basetype, 
	• \dateTime[|dateSign => \integer|]
	• \dateTime[|year => \integer|]
	• \dateTime[|month => \integer|]
	• \dateTime[|day => \integer|]
	• \dateTime[|hour => \integer|]
	• \dateTime[|minute => \integer|]
	• \dateTime[|second => \integer|]
	• \dateTime[|zoneSign => \integer|]
	• \dateTime[|zoneHour => \integer|]
	• \dateTime[|zoneMinute => \integer|]
	• \dateTime[|date => \date|]
	• \dateTime[|time => \time|]	
*/

/*  Replacing with TimeObject for real
?shift[timeObject -> ?year(?month(?day(?hour)))] :-
		?shift :: Shift,
		?shift[startTime -> ?_startTime],
		?_startTime^^\dateTime[year -> ?_startYear, month -> ?_startMonth, day -> ?_startDay, hour -> ?_startHour]@\basetype,
		?shift[endTime -> ?_endTime],
		?_endTime^^\dateTime[year -> ?_endYear, month -> ?_endMonth, day -> ?_endDay, hour -> ?_endHour]@\basetype,
		?hour :: Hour[day -> ?day],
		?day[month -> ?month],
		dayNum(?day, ?_dayNum),
		?month[year -> ?year],
		?month[monthNum -> ?_monthNumber],
		?_startYear =< ?year,
		?_startMonth =< ?_monthNumber,
		?_startDay =< ?_dayNum,
		?_startHour =< ?hour,
		?_endYear >= ?year,
		?_endMonth >= ?_monthNumber,
		?_endDay >= ?_dayNum,
		?_endHour >= ?hour.
*/
?shift[day -> ?startMonth(?day)] :-
		?shift :: Shift,
		?shift[startTime -> ?_startTime],
		?_startTime^^\dateTime[year -> ?_startYear, month -> ?startMonth, day -> ?_startDay]@\basetype,
		?day :: Day[month -> ?_Month],
		dayNum(?day, ?_dayNum),
		?_Month[year -> ?_Year],
		?_Month[monthNum -> ?_monthNumber],
		?_startYear == ?_Year,
		?startMonth == ?_monthNumber,
		?_startDay == ?_dayNum.

		
?shift[hour -> ?day(?hour)] :-
		?shift :: Shift,
		?shift[startTime -> ?_startTime],
		?_startTime^^\dateTime[year -> ?_startYear, month -> ?_startMonth, day -> ?_startDay, hour -> ?_startHour]@\basetype,
		?shift[endTime -> ?_endTime],
		?_endTime^^\dateTime[year -> ?_endYear, month -> ?_endMonth, day -> ?_endDay, hour -> ?_endHour]@\basetype,
		?hour :: Hour[day -> ?day],
		?day[month -> ?_Month],
		dayNum(?day, ?_dayNum),
		?_Month[year -> ?_Year],
		?_Month[monthNum -> ?_monthNumber],
		?_startYear =< ?_Year,
		?_startMonth =< ?_monthNumber,
		?_startDay =< ?_dayNum,
		?_startHour =< ?hour,
		?_endYear >= ?_Year,
		?_endMonth >= ?_monthNumber,
		?_endDay >= ?_dayNum,
		?_endHour >= ?hour.

shiftsCanBeAssignedTogehter(?firstShift, ?secondShift) :-
	\naf shiftsAreOnTheSameDay(?firstShift, ?secondShift),
	hoursBetweenShifts(?firstShift, ?secondShift, ?countHrs), 
	?countHrs >= 10.

shiftsAreOnTheSameDay(?firstShift, ?secondShift) :-
	?firstShift :: Shift,
	?secondShift :: Shift,
	?firstShift \== ?secondShift,
	?firstShift[timeObject -> ?_year(?_month(?_day(?(?))))],
	?secondShift[timeObject -> ?_year(?_month(?_day(?(?))))].

hoursBetweenShifts(?firstShift, ?secondShift, ?countHrs) :-
	?firstShift :: Shift,
	?secondShift :: Shift,
	?firstShift \== ?secondShift,
	?_firstStart = min{ ?_firstStartSorted | ?firstShift[timeObject -> ?_firstStartTime], ?_firstStartTime[sortValue -> ?_firstStartSorted] },
	?_secondStart = min{ ?_secondStartSorted | ?secondShift[timeObject -> ?_secondStartTime], ?_secondStartTime[sortValue -> ?_secondStartSorted] },
	?_firstEnd = max{ ?_firstEndSorted | ?firstShift[timeObject -> ?_firstEndTime], ?_firstEndTime[sortValue -> ?_firstEndSorted] },
	?_secondEnd = max{ ?_secondEndSorted | ?secondShift[timeObject -> ?_secondEndTime], ?_secondEndTime[sortValue -> ?_secondEndSorted] },
	?_lateShiftStart \is max([?_firstStart, ?_secondStart]),
	?_earlyShiftEnd \is min([?_firstEnd, ?_secondEnd]),
	?_lateShiftStartCal[sortValue -> ?_lateShiftStart],
	?_earlyShiftEndCal[sortValue -> ?_earlyShiftEnd],
	\if (?_earlyShiftEnd >= ?_lateShiftStart)
	\then ?countHrs \is 0
	\else 	(
				?_totalMinutes \is count{ ?_totalMins| TimeBetween(?_earlyShiftEndCal, ?_lateShiftStartCal, ?_totalMins) },
				?countHrs \is div(?_totalMinutes, 4)
			).

















/*

First identify the day each person is available for a given shift.
I don't think i need day month and year for this method because it's already exclusive.



//TO-DO add rules object maybe
availableEmployeesForShift(?employee, ?shift) :-
	?employee :: Employee,
	?shift :: Shift,
	?shift[day -> ?shiftDay],
	?shift[month -> ?shiftMonth],
	?shift[year -> ?shiftYear],
	(
		(
			?employee[unavailable -> ?event],
			?event[day -> ?eventDay],
			?event[month -> ?eventMonth],
			?event[year -> ?eventYear],
			(
				?shiftDay !== ?eventDay ;
				?shiftMonth !== ?eventMonth ;
				?shiftYear !== ?eventYear
			)	
		);
		(
			\naf employeeHasTimeOff(?employee)
		)
	).
	
// needed to prevent unknown/uncertains
employeeHasTimeOff(?employee) :-
	?employee :: Employee,
	?employee[unavailable -> ?_event].


*/
/*
	Now I want to identify all shift combinations for a single day and match them to employees.  


allSingleShiftCombinations(?shift, ?employee, ?day) :-
	availableEmployeesForShift(?employee, ?shift), 
	?shift[lengthHour -> ?_hours], 
	?employee[dailyMaxHours -> ?_maxHours],
	?shift[day -> ?day],
	?_hours =< ?_maxHours.
*/
/*
	Now I want to identify all shift combinations for a single day and match them to employees.  


	
shiftHasMultipleAvailablePeople(?shift) :-
	?shift :: Shift,
	allSingleShiftCombinations(?shift, ?_employee, ?_day),
	allSingleShiftCombinations(?shift, ?_oEmployee, ?_day),
	?_employee !== ?_oEmployee.
	
?shift[OnlyAvailableperson -> ?employee] :-
	allSingleShiftCombinations(?shift, ?employee, ?_day),
	\naf shiftHasMultipleAvailablePeople(?shift).
*/	
/*
	Now I want to "brute force" or randomly assign shifts to employees using Max/Min until all the shifts are gone or their total hours are used up.  
firstRoundRandom(?maxShift, ?maxEmployee) 

	
assignedShift(?shiftList) :-
	\while 
		?shiftList 
	\do 
		writeln(?shiftList)@\io.
		//, writeln(?employeeList)@\io.

		
		// While there are shifts not assigned to a person, and there are people with remaining hours, assign the person with the greatest number of remaining hours to a random shift.
	
	//	\while allSingleShiftCombinations(?shift, ?employee, ?day) \do writeln("estesttest")@\io.

	
;
		?employeeList
*/	
/*		
	?maxShift = max{ ?_shift | shiftHasMultipleAvailablePeople( ?_shift), availableEmployeesForShift(?_employee, ?_shift), personsMaxHourDifference(?_employee, ?_hoursDiff), ?_hoursDiff >= 1 },
	?maxEmployee = max{ ?_employee| shiftHasMultipleAvailablePeople( ?_shift), availableEmployeesForShift(?_employee, ?_shift), personsMaxHourDifference(?_employee, ?_hoursDiff), ?_hoursDiff >= 1 }.
	


		Approach to double the assignments.  Need to ensure that there are multiple people and shifts or we'll end up with a double assignment.
			(
				?maxShift = max{ ?_shift | shiftHasMultipleAvailablePeople( ?_shift) },
				?maxEmployee = max{ ?employee | personsMaxHourDifference(?employee, ?_hoursDiff), ?_hoursDiff >= 1 }
			);
			(
				?maxShift = min{ ?_shift | shiftHasMultipleAvailablePeople( ?_shift) },
				?maxEmployee = min{ ?employee | personsMaxHourDifference(?employee, ?_hoursDiff), ?_hoursDiff >= 1 }
			).
*/		
	
	
	
/*
	identify remaining shifts which excludes all currently assigned shifts.  this was previously taken care of by shiftHasMultipleAvailablePeople

*/	
	
	
//NOT WOrking		
/*
RemainingShiftsAfterfirstRoundRandom(?remaingingSHifts) :-
	//?allShifts = setof{ ?_shift | allSingleShiftCombinations(?_shift, ?_employee, ?_day)},
	?_allShifts = setof{ ?_shift | ?_shift[OnlyAvailableperson -> ?_employee] },
	?_allAssignedShifts = setof{?_shift | isAssignedAfterFirstRoundRandom(?_shift) },
	?remaingingSHifts == (?_allShifts - ?_allAssignedShifts).

isAssignedAfterFirstRoundRandom(?shift) :-
	?shift :: Shift,
	(
		firstRoundRandom(?shift, ?_employee) ;
		?shift[OnlyAvailableperson -> ?_employee]
	).
	
*/	
/*  TO-DO - think about limiting only available based on max hours or taking shifts away if over

	identify employees not over the limit.

	
personHasOverMaxBasedOnOnlyAvailable(?employee) :-
	?employee[monthlyMaxHours -> ?_maxHours],
	sum{?_hours | ?shift[OnlyAvailableperson -> ?employee], ?shift[lengthHour -> ?_hours] } >= ?_maxHours.
	
personsMaxHourDifference(?employee, ?hoursDiff) :-
	?employee[monthlyMaxHours -> ?_maxHours],
	?hoursDiff \is (?_maxHours - sum{?_hours | ?shift[OnlyAvailableperson -> ?employee], ?shift[lengthHour -> ?_hours] } ).

	
	
*/










/*

?e[shifts -> ?shift] :-
	?e :: Employee,
	?shift :: Shift,
	availableEmployeesForShift(?e, ?availableShift),
	?totalHours = sum{?length|?availableShift :: Shift, ?availableShift[lengthHour -> ?length] },
	?shift == ?availableShift,
	?e[maxHours -> ?maxHours],
	?maxHours >= ?totalHours.
	
shiftsThatAddUpToSomeNumber({?shift}, ?maxNumber) :-
	sum{?length|?availableShift :: Shift, ?availableShift[lengthHour -> ?length] }.
	
*/
/*
allSingleShiftCombinations(?listShifts(?employee)) :-
	?listShifts = setof{?shift[?employee] | availableEmployeesForShift(?employee, ?shift), ?shift[lengthHour -> ?_hours], ?employee[dailyMaxHours -> ?_maxHours], ?_hours =< ?_maxHours }.
	
allDoubleShiftCombinations(?listShifts(?oShift, ?employee)) :-
	?listShifts = setof{ ?shift[?oShift, ?employee] | availableEmployeesForShift(?employee, ?shift), availableEmployeesForShift(?employee, ?oShift), ?oShift !== ?shift, ?shift[lengthHour -> ?_hours], ?oShift[lengthHour -> ?_oHours], ?employee[dailyMaxHours -> ?_maxHours], (?_oHours + ?_hours =< ?_maxHours) }.


allSingleShiftCombinations(?shift, ?employee, ?day) :-
	availableEmployeesForShift(?employee, ?shift), ?shift[lengthHour -> ?_hours], ?employee[dailyMaxHours -> ?_maxHours],
	?shift[day -> ?day].
*/


	
/*	
allDoubleShiftCombinations(?shift, ?oShift, ?employee) :-
	 availableEmployeesForShift(?employee, ?shift), 
	 availableEmployeesForShift(?employee, ?oShift), 
	 ?oShift !== ?shift, 
	 ?shift[lengthHour -> ?_hours], ?oShift[lengthHour -> ?_oHours], 
	 ?employee[monthlyMaxHours -> ?_maxHours], 
	 (?_oHours + ?_hours =< ?_maxHours).
	

holyGodCanIjointhese(?pairedShifts, ?employee) :-
	allSingleShiftCombinations(?_shift, ?employee),
	allDoubleShiftCombinations(?_shift, ?pairedShifts, ?employee).
	
//TODO

allTripleShiftCombinations(?listShifts(?1Shift, ?2Shift, ?employee)) :-
	?listShifts = setof{ ?shift[?1Shift, ?nShift, ?employee] | 
	availableEmployeesForShift(?employee, ?shift), availableEmployeesForShift(?employee, ?1Shift), availableEmployeesForShift(?employee, ?2Shift), 
	?1Shift !== ?shift, ?1Shift !== ?2shift, ?2Shift !== ?shift,
	?shift[lengthHour -> ?_hours], ?1Shift[lengthHour -> ?_1Hours], ?2Shift[lengthHour -> ?_2Hours], ?employee[monthlyMaxHours -> ?_maxHours], 
	(?_1Hours + ?_hours + ?_2Hours =< ?_maxHours) 
	}.

*/

	

/*

holyGodCanIjointhese(?shiftGroups, ?employee) :-
		(
			allSingleShiftCombinations(?shiftGroups(?employee)),
			\neg personHasAtLeast2ShiftCombinations(?employee)
		) ;
		(
			(
				allSingleShiftCombinations(?_listShifts(?employee));
				allDoubleShiftCombinations(?shiftGroups(?_listShifts, ?employee))
			),
			personHasAtLeast2ShiftCombinations(?employee)
		).
*/
/*	
personHasAtLeast2ShiftCombinations(?emp) :-
	count{?_shiftGroups | allDoubleShiftCombinations(?_shiftGroups(?_listShifts, ?emp)) } >= 1.

\neg personHasAtLeast2ShiftCombinations(?emp) :-
	count{?_shiftGroups | allDoubleShiftCombinations(?_shiftGroups(?_listShifts, ?emp)) } < 1.	
	
	
	?oShift::Shift[lengthHour -> ?Y], ?shift::Shift[lengthHour -> ?Z], ?oShift !== ?shift, ?Y + ?Z =< 20, ?oShift[day -> ?oDay], ?shift[day -> ?day], ?day !== ?oDay.
*/
	
