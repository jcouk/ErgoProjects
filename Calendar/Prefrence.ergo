
/*
preferenceScore(?employee, ?shift, ?score) :-
	\if preferenceMatchesShiftCompletely(?employee, ?shift)
	\then ?score \is 100
	\else preferencePartiallyMatchesPercent(?employee, ?shift, ?score).
*/

// 1 is the weight here.
preferenceScore(?employee, ?shift, ?score) :-
	?_count = count{ ?_date | preferenceMatchDates(?employee, ?shift, ?_date)},
	?score \is ?_count * 1.

shiftScore(?shift, ?score) :-
	?_count = count{ ?_date | shiftDates(?shift, ?_date)},
	?score \is ?_count * 1.

//a rule that subtracts points for each date not filled.  probably make it weighted at 3? or something more than 2.	
missingShiftScore(?allAssignedShifts, ?score) :-
	?_allShifts = setof{ ?_shift | ?_shift :: Shift },
	?_remainingShifts \is  ?_allShifts -- ?allAssignedShifts,
	?_count = count{ ?_date | [?_shift] \subset ?_remainingShifts, shiftDates(?_shift, ?_date) },
	?score \is ?_count * 3.
	
//a rule that rewards people working the same shift dateTime on a different day.  
//assumes that the shifts are not actually durring the same year month or day.  Other rules should prevent that.
consistentScheduleScore(?shiftOne, ?shiftTwo, ?score) :-
	?_count = count{ ?_hourMinute |
		?shiftOne !== ?shiftTwo,
		shiftDates(?shiftOne, ?(?(?(?_hourMinute)))),
		shiftDates(?shiftTwo, ?(?(?(?_hourMinute))))
		},
	?score \is ?_count * (1/3).

//a way to reward a fair distribution of shifts
// TO-DO: work on this
evenDistributionScore(?personShift, ?score) :-
	?_averagePercentage = avg{ ?_percentage | 
		[?_person(?_shifts)] \subset ?personShift, 
		percentageAvailableVsAssigned(?_person, ?_shifts, ?_percentage) 
	},
	?_sumTotalVariance = sum{ ?_var | 
		[?_person(?_shifts)] \subset ?personShift, 
		percentageAvailableVsAssigned(?_person, ?_shifts, ?_percentage),
		?_value \is ?_percentage - ?_averagePercentage,
		?_var \is **(?_value, 2)
	},
	?_totalNumber = count{ ?_shifts | 
		[?_person(?_shifts)] \subset ?personShift
	},
	?_denominator \is ?_totalNumber - 1,
	?_variance \is ?_sumTotalVariance / ?_denominator,
	?score \is 	(100 - ?_variance) * 2.
	
percentageAvailableVsAssigned(?employee, ?shifts, ?percentage) :-
	employeeAvailableTime(?employee, ?_availableTime),
	?_assignedTime = count{ ?_date | [?_shift] \subset ?shifts, shiftDates(?_shift, ?_date)}, 
	?percentage \is (?_assignedTime / ?_availableTime) * 100.

//negative impact if a person is available for some shifts but not assigned any
noassignedShifts(?employee, ?shifts, ?score) :-
	?shifts[length -> 0]@\btp,
	?_numberOfAvailableShiftTimes = count{ ?_date | 
		?_allShifts = setof{ ?_shift | 
			shiftsAvailableForEmployee(?, ?employee, ?_shift)
		},
		[?_singleShift] \subset ?_allShifts,
		shiftDates(?_singleShift, ?_date) },
	?_numberOfTotalShiftTimes = count{ ?_date | shiftDates(?_shift, ?_date) },
	?_percentageAvailable = ( ?_numberOfAvailableShiftTimes / ?_numberOfTotalShiftTimes ),
	?score \is ?_percentageAvailable * 100.
	
/* To-Do Ideas	



a different person on each weekend, (to do this we need to calculate more than 1 week.)



*/

	
/*
preferenceMatchesShiftCompletely(?employee, ?shift) :-
	?_shiftTimes = setof{ ?_sTimes[?shift] | ?shift[timeObject -> ?_sTimes], ?shift :: Shift},
	?_preferenceTimes = setof{ ?_pTimes[?employee] |?employee :: Employee, ?employee[preference -> ?_preference], ?_preference :: Preference, ?_preference[timeObject -> ?_pTimes] },
	(
	//	(
		//	?_preferenceTimes \subset ?_shiftTimes
		//);
		(
			?_shiftTimes \subset ?_preferenceTimes
		)
	
	).	
*/	

shiftDates(?shift, ?date) :-
	?shift :: Shift,
	?shift[timeObject -> ?date].

preferenceMatchDates(?employee, ?shift, ?date) :-
	?shift :: Shift,
	?shift[timeObject -> ?date],
	?employee :: Employee,
	?employee[preference -> ?_preference], 
	?_preference :: Preference, 
	?_preference[timeObject -> ?date].

	
	
/*	
preferencePartiallyMatchesPercent(?employee, ?shift, ?percent) :-
	?_shiftSize = count{ ?_sDates[?shift] | ?_pshift[timeObject -> ?_sDates], ?shift :: Shift },
	?_matchSize = count{ ?_mDates[?_oShift, ?employee] | preferencePartiallyMatchesDates(?employee, ?_oShift, ?_mDates)  },
	?_oShift == ?shift,
	?percent \is (?_matchSize / ?_shiftSize) * 100.
*/
/*
preferencePartiallyMatchesShift(?employee, ?shift) :-
	?_minShiftTime = min{ ?_sortedMinSTime[?shift] | ?shift[timeObject -> ?_minSTimes], ?shift :: Shift, ?_minSTimes[sortValue -> ?_sortedMinSTime] },
	?_maxShiftTime = max{ ?_sortedMaxSTime[?shift] | ?shift[timeObject -> ?_maxSTimes], ?shift :: Shift, ?_maxSTimes[sortValue -> ?_sortedMaxSTime]},
	?_minPreferenceTime = min{ ?_sortedMinPTime[?employee] | ?employee :: Employee, ?employee[preference -> ?_preference], ?_preference :: Preference, ?_preference[timeObject -> ?_minPTimes], ?_minPTimes[sortValue -> ?_sortedMinPTime] },
	?_maxPreferenceTime = max{ ?_sortedMaxPTime[?employee] | ?employee :: Employee, ?employee[preference -> ?_preference], ?_preference :: Preference, ?_preference[timeObject -> ?_maxPTimes], ?_maxPTimes[sortValue -> ?_sortedMaxPTime] },
	?_minShiftTime =< ?_maxPreferenceTimes,
	?_maxShiftTime >= ?_minPreferenceTime.
*/
	