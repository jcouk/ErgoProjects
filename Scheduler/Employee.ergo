:- use_argumentation_theory.

hasNoUnavailable(?employee^^Employee) :-
	\if (countOfHolidaysByEmployee(?employee, ?_number) )
	\then (\false)
	\else (\true).
	
countOfHolidaysByEmployee(?emp^^Employee, ?number) :-
	?_events = setof{?_event[?emp] | ?emp[unavailable -> ?_events], ?_event \in ?_events },
	?_events[length -> ?number]@\btp.
			

hasNoShifts(?employee^^Employee) :-
	\if (countOfshifsByEmployee(?employee, ?_number) )
	\then \false
	\else \true.
		
		
countOfshifsByEmployee(?emp^^Employee, ?number) :-
	?number= count{?_shift[?emp] | ?emp[shifts -> ?_shift] }.
			
		
shiftsAvailableForEmployee(?score, ?employee^^Employee, ?shift^^Shift) :-
	?_allPossibleShifts = setof{ ?_shift[?employee] | 
			?employee[temporalContains -> ?_shift]
		},
	employeeExcludedShifts(?employee, ?_excludedShifts),
	?_finalShifts \is ?_allPossibleShifts -- ?_excludedShifts,
	//?_finalShifts[ith(?_X) -> ?shift]@\btp,
        ?shift \in ?_finalShifts,
	shiftScore(?shift, ?score).
	//shiftScore(?shift, ?score).

// requires an employee
employeeExcludedShifts(?employee, ?shifts) :-
	?employee : Employee,
	?shifts = setof{ ?_eShift | 
				employeeEvents(?employee, ?_event),
				eventsForShifts(?_event, ?_eShift)
			}.
	
employeeEvents(?employee, ?event) :-
	?employee : Employee,
	?employee[unavailable -> ?_events],
	//?_events[ith(?_N) -> ?event]@\btp.
        ?event \in ?_events.
	
	
eventsForShifts(?event^^Event, ?shift^^Shift) :-
	(
		?event[temporalContains -> ?shift] ;
		?shift[temporalContains -> ?event] ;
		?event[temporalTouches -> ?shift]
		
	).
	
	


	/*
	
	?_employeeTimes = setof{ ?_eTimes | ?employee[timeObject -> ?_eTimes]}, ?_unAvailTime = setof{ ?_uTimes | ?employee[unavailable -> ?_event], ?_event : Event, ?_event[timeObject -> ?_uTimes] }, ?_unAvailTime \subset ?_employeeTimes.
	
	,
	setof{ ?time | ?employee : Employee, ?employee[timeObject -> ?time] }.
	(
		(
			hasNoUnavailable(?employee)
		);
		(
			\naf hasNoUnavailable(?employee),
			?employee[unavailable -> ?_event],
			?_event : Event,
			?_event[timeObject -> ?_year(?_month(?_day(?_hour(?))))]
			//,
			//?_year(?_month(?_day(?_hour(?)))) !== ?_oYear(?_oMonth(?_oDay(?_oHour(?))))
		)
	).

	*/
employeeAvailableTime(?employee^^Employee, ?totalScore) :-
	\if ( ?_totScore \is sum{ ?_score[?employee] | shiftsAvailableForEmployee(?_score, ?employee, ?)} )
	\then ?totalScore = ?_totScore
	\else ?totalScore = 0.
	
allShiftsSet(?shift^^Shift, ?employees) :-
	?employees = setof{ ?_employee[?shift] | shiftsAvailableForEmployee(?_score, ?_employee, ?shift) }.
	
allNoPreferenceShiftsSet(?shift^^Shift, ?employees) :-
	?employees = setof{ ?_employee[?shift] | shiftsAvailableForEmployee(?_score, ?_employee, ?shift), \naf preferenceScore(?, ?shift, ?) }.	

	
allPreferenceShiftsSet(?shift^^Shift, ?employees) :-
	?employees = setof{ ?_employee[?shift] | MaxScoreByEmployeeAndShift(?shift, ?_employee, ?)}.
	
MaxScoreByEmployeeAndShift(?shift^^Shift, ?employee^^Employee, ?score) :-
	?score = max{ ?_score[?employee, ?shift] | shiftsAvailableForEmployee(?, ?employee, ?shift), preferenceScore(?employee, ?shift, ?_score) }.
		
	
employeeOnlyAvailableShiftHours(?employee^^Employee, ?totalScore) :-
	\if (?_testTotalScore = count{ ?_score[?employee] | shiftsAvailableForEmployee(?_score, ?employee, ?_shift), allShiftsSet(?_shift, ?_employees), ?_employees[length -> 1]@\btp})
	\then (?totalScore = ?_testTotalScore )
	\else (?totalScore = 0 ).

	
// when using this rule we expect shift and employees to be provided.
/*
%pickARandomWinner(?winnerEmp, ?shift, ?employees) :-
		?shift : Shift,
		%lowestAssignedEmp(?employees, ?_oEmployee),
		?winnerEmp \is ?_oEmployee,
		insert{stealth{%winners(?winnerEmp, ?shift, ?employees)}}.

// current problem is that min grouped by employee.  Need to think of a way to get a list of mins.
// instead of min, perhaps get a set of percentages grouped by employees and order desc then take the 1 spot.
%lowestAssignedEmp(?lowestEmployees, ?lowestEmployee) :-
	?_percentage \is min{ ?_percentage | %employeePercentageOfAssigned(?, ?_percentage)},
	?_empsWithLowestPercentage = setof{ ?_lowestEmp | %employeePercentageOfAssigned(?_lowestEmp, ?_percentage)},
	pickFirst(?_empsWithLowestPercentage, ?_firstLowestEmp),
	?_firstLowestEmp : Employee,
	?lowestEmployees[member(?_firstLowestEmp)]@\btp,
	?lowestEmployee \is ?_firstLowestEmp.

	
pickFirst(?list, ?firstItem) :-
		?list[ith(1) -> ?firstItem]@\btp.
	
*/	
// apprently ergo is div by zero safe by default!  sweet deal.
/*
%employeePercentageOfAssigned(?employee, ?percentage) :-
	(
		?employee : Employee,
		employeeAvailableHours(?employee, ?_totalAvailableHours),
		(
			?_totalAvailableHours == 0,
			?percentage \is 1
		) ;
		(
			%assignedWinnerHours(?employee, ?_totalAssignedHours),
			employeeOnlyAvailableShiftHours(?employee, ?_totalHours),
			employeeAvailableHours(?employee, ?_totalAvailableHours),
			?percentage \is (?_totalAssignedHours + ?_totalHours) / ?_totalAvailableHours
		)
	).


%assignedShiftsForEmployee(?date, ?employee, ?shift) :-
	%winners(?employee, ?shift, ?_employees),
	?shift : Shift,
	?shift[timeObject -> ?date].	
	
%assignedWinnerHours(?employee, ?totalHours) :-
	?employee : Employee,
	\if (?_totHours \is count{ ?_date[?_emp] | %assignedShiftsForEmployee(?_date, ?_emp, ?)}, ?_emp : Employee,?employee == ?_emp)
	\then (?totalHours \is ?_totHours)
	\else (?totalHours \is 0).
*/	
// todo prove: 
// identifyPreferences

// only available should be assigned first as it's the most important if there are limited hours for each person.
/*
@{only_available}
%assignShifts(?shift, ?pickEmp) :-
	 allShiftsSet(?shift, ?_employees),
		(
			(
				?_employees[length -> 1]@\btp,
				?_employees[ith(1) -> ?pickEmp]@\btp,
				insert{stealth{%winners(?pickEmp, ?shift, ?_employees)}}
			)
		).


@{multiple_available_no_preference}
%assignShifts(?shift, ?pickEmp) :-
	 allNoPreferenceShiftsSet(?shift, ?_employees),
		(
			(
				?_employees[length -> ?_NumberOfMatches]@\btp,
				?_NumberOfMatches >= 2,
				%pickARandomWinner(?pickEmp, ?shift, ?_employees)
			)
		).

@{preference}
%assignShifts(?shift, ?pickEmp) :-
	 allPreferenceShiftsSet(?shift, ?_employees),
		(
			(
				?_employees[length -> 1]@\btp,
				?_employees[ith(1) -> ?pickEmp]@\btp
			);
			(
				?_employees[length -> ?_NumberOfMatches]@\btp,
				?_NumberOfMatches >= 2,
				%pickARandomWinner(?pickEmp, ?shift, ?_employees)
			)
		).

		
\overrides(only_available,preference).
\overrides(preference,multiple_available_no_preference).		
*/

/* experiment gone wrong
fullListOfPossibleAssignments(?employee, ?compatibleShifts) :-
	?_startList \is setof(?_shift | shiftsAvailableForEmployee(?, ?employee, ?_shift) ), 
	(
		(
			?_startList[length -> 1],
			?compatibleShifts \is ?_startList
		) ;
		(
			?_startList[length -> 2],
			?_startList[ith(1) -> ?_shift1],
			?_startList[ith(2) -> ?_shift2],
			shiftsCanBeAssignedTogehter(?_shift1, ?_shift2),
			?compatibleShifts \is [?_shift1, ?_shift2]
		) ;
		(
			?_startList[length -> 2],
			?_startList[ith(1) -> ?_shift1],
			?_startList[ith(2) -> ?_shift2],
			\naf shiftsCanBeAssignedTogehter(?_shift1, ?_shift2),
			?compatibleShifts \is [?_shift1]
		) ;
		(
			?_startList[length -> ?_X],
			?_X >= 3,
			compatibleShifts(?employee, ?_shift, ?_compShifts),
		)
	
	).
*/

	//returns all possible lists  FIX THIS
%shiftAssignmentItteration(?employee^^Employee, ?shift^^Shift, ?compShifts, ?remainingList, ?finalList) :-	
	compatibleShifts(?employee, ?shift, ?_oCompShifts),
	?_totalShifts \is ?_oCompShifts && ?remainingList,
	(
		(
			?_totalShifts[length -> ?_size]@\btp, 
			?_size >= 1,
			//?_totalShifts[ith(?_X) -> ?_independentShift]@\btp,
                  ?_independentShift \in ?_totalShifts,
			?_finalListNeedsSorting = [?shift,?_independentShift|?compShifts],
			?_finalListNeedsSorting[sort -> ?finalList]@\btp
		
		);
		(
			?_totalShifts[length -> ?_size]@\btp, 
			?_size == 0,
			?_finalListNeedsSorting = [?shift|?compShifts],
			?_finalListNeedsSorting[sort -> ?finalList]@\btp	
		);
		(
			?_totalShifts[length -> ?_size]@\btp, 
			?_size >= 2,
			//?_totalShifts[ith(?_C) -> ?_firtCompShift]@\btp, 
                  ?_firtCompShift \in ?_totalShifts,
			?_currShifts = [?shift|?compShifts],
			// sorting here to remove duplicates
			?_currShifts[sort -> ?_sortedCurrShifts]@\btp,
			%shiftAssignmentItteration(?employee, ?_firtCompShift, ?_sortedCurrShifts, ?_totalShifts, ?finalList)
		
		)
	).
	/*
	
	
	
	
	
	
	
	\if (
			?totalShifts[length -> ?_size]@\btp, 
			?_size >= 3
		)
	\then 
		(
			?totalShifts[ith(?_C) -> ?_firtCompShift]@\btp, 
			?_currShifts \is [?shift] ++ ?compShifts,
			// sorting here to remove duplicates
			?_currShifts[sort -> ?_sortedCurrShifts]@\btp,
			%shiftAssignmentItteration(?employee, ?_firtCompShift, ?_sortedCurrShifts, ?totalShifts, ?finalList)
		)
	\else 
		(
			\if (
					?totalShifts[length -> ?_size]@\btp, 
					?_size >= 2,
					?totalShifts[ith(1) -> ?_secondCompShiftOne]@\btp,
					?totalShifts[ith(2) -> ?_secondCompShiftTwo]@\btp,
					shiftsCanBeAssignedTogehter(?_secondCompShiftOne, ?_secondCompShiftTwo)
				)
			\then 
				(
					//adding sort logic
					?_finalListNeedsSorting \is [?shift] ++ [?_secondCompShiftOne] ++ [?_secondCompShiftTwo] ++ ?compShifts,
					?_finalListNeedsSorting[sort -> ?finalList]@\btp
				)
			\else
				(
					\if (
							?totalShifts[length -> ?_size]@\btp, 
							?_size >= 1
						)
					\then
						(
							?totalShifts[ith(?_X) -> ?_independentShift]@\btp,
							?_finalListNeedsSorting \is [?shift] ++ [?_independentShift] ++ ?compShifts,
							?_finalListNeedsSorting[sort -> ?finalList]@\btp
						)
					\else
						(
							?_finalListNeedsSorting \is [?shift] ++ ?compShifts,
							?_finalListNeedsSorting[sort -> ?finalList]@\btp
						)
					
				)			
		).
	
	*/

compatibleShifts(?employee^^Employee, ?shift^^Shift, ?compatablieShifts) :-
	(
		?_compatablieShiftsUnosrted = setof{ ?_shift[?employee, ?shift] |
																shiftsAvailableForEmployee(?, ?employee, ?_shift), 
																shiftsCanBeAssignedTogehter(?_shift, ?shift),
																shiftsAvailableForEmployee(?, ?employee, ?shift)
							},
		?_compatablieShiftsUnosrted[sort -> ?compatablieShifts]@\btp					
							
	).
	/*  Removing this to test performance
	;
	(
		shiftsAvailableForEmployee(?, ?employee, ?shift), 
		?compatablieShifts \is []
	).
	*/
/*	
@{singleCompatible}
compatibleShifts(?employee, ?shift, ?compatablieShifts) :-
	shiftsAvailableForEmployee(?, ?employee, ?shift), 
	?compatablieShifts \is [].
*/
//\overrides(multipleCompatible,singleCompatible).	

allShiftsToPerson(?person, ?shiftsLists) :-
	?_shiftsListsUnsortedExceptSignles = setof{ ?_shifts[?person] | ?_remainingList = setof{?_shift | ?_shift : Shift},  
	//?_X \is [], THIS MUST BE A BUG: used as arg in ith(...)
	%shiftAssignmentItteration(?person, ?_shift, ?_X, ?_remainingList, ?_shifts) },
	?_allShiftsAsAListOfLists = setof{ ?_multiple | 
		?_allSingleShifts = setof{ ?_shift | 
				shiftsAvailableForEmployee(?, ?person, ?_shift) 
				}, 
		?_allSingleShifts[ith(?_X) -> ?_single]@\btp, // Same ?_X???
		?_multiple = [?_single] 
	},
	?_shiftsListsUnsorted \is ?_shiftsListsUnsortedExceptSignles ++ ?_allShiftsAsAListOfLists,
	?_shiftsListsUnsorted[sort -> ?shiftsLists]@\btp.

	
singleShiftToPerson(?person, ?shifts) :-
	?_remainingList = setof{?_shift | ?_shift : Shift},  
	?_X = [], // SUSPICIONS. BUG?
	%shiftAssignmentItteration(?person, ?_shift, ?_X, ?_remainingList, ?shifts).

personToShiftCombo(?personShift) :-
	(
		allShiftsToPerson(?_person, ?_shiftsLists),
		?_shift \in ?_shiftsLists,
		?personShift = ?_person(?_shift)
	).
	/* removing for now
	;
	(
		shiftsAvailableForEmployee(?, ?_person, ?),
		?_noshifts \is [],
		?personShift = ?_person(?_noshifts)
	).
	*/ 
/*
@{noShifts}	 
personToShiftCombo(?personShift) :-
	.	 
*/
//\overrides(noShifts,allPossibleShifts).	

//idea - write a rule to identify the highest number of possible assignments.  work through the highest assignemtns first.
%uniquePersonShiftCombos(?tempList, ?personShifts) :-
	?_allPeople = setof{ ?_person | shiftsAvailableForEmployee(?, ?_person, ?)},
	?tempList[length -> ?_currlistSize]@\btp, 
	?_allPeople[length -> ?_numPeople]@\btp, 
	(
		(
			?_currlistSize >= ?_numPeople,
			?tempList[sort -> ?_personShiftTemp]@\btp,
			?personShifts = ?_personShiftTemp
			//%eachPersonShiftComboScore(?_personShiftTemp, ?_score),
			//?_score >= 0,
			//?personShifts = ?_score(?_personShiftTemp)
		);
		(
			?_currlistSize < ?_numPeople,
			?_currentPers = setof{ ?_currPersons | ?_currPersons(?_currShifts) \in ?tempList },
			?_currentShifts = setof{ ?_currShifts | ?_currPersons(?_currShifts) \in ?tempList },
			?_singleListShifts = setof{ ?_sShift | ?_currSingleShifts \in ?_currentShifts, ?_sShift \in ?_currSingleShifts }, 
			?_remainIngPers \is ?_allPeople -- ?_currentPers,
			//?_remainIngPers[ith(?_N) -> ?_nextPers]@\btp,
                  ?_nextPers \in ?_remainIngPers,
			// attempting to optimize
			//?_nextPers \in ?_remainIngPers,
			personToShiftCombo(?_nextPers(?_shifts)),
			?_singleListShifts[sort -> ?_singleListShiftsSorted]@\btp,
			//doesNotConitainDuplicateShift(?_singleListShiftsSorted, ?_shiftsSorted),
			?_matchingShifts \is ?_singleListShiftsSorted && ?_shifts,
			?_matchingShifts[length -> 0]@\btp,
			?_shifts[sort -> ?_shiftsSorted]@\btp,
			?_runningList \is ?tempList ++ [?_nextPers(?_shiftsSorted)],
			?_runningList[sort -> ?_sortedRunningList]@\btp,
			%uniquePersonShiftCombos(?_sortedRunningList, ?personShifts)
		
		)
	).
	
	
/*	
	\if (
			?tempList[length -> ?_currlistSize]@\btp, 
			?_allPeople[length -> ?_numPeople]@\btp, 
			?_currlistSize >= ?_numPeople
		)
	\then
		(
			?tempList[sort -> ?_personShiftTemp]@\btp ,
			%eachPersonShiftComboScore(?_personShiftTemp, ?_score),
			?_score >= 0,
			?personShifts = ?_score(?_personShiftTemp)
		)
	\else
		(
			?_currentPers = setof{ ?_currPersons | [?_currPersons(?_currShifts)] \subset ?tempList },
			?_currentShifts = setof{ ?_currShifts | [?_currPersons(?_currShifts)] \subset ?tempList },
			?_singleListShifts = setof{ ?_sShift | [?_currSingleShifts] \subset ?_currentShifts, [?_sShift] \subset ?_currSingleShifts }, 
			?_remainIngPers \is ?_allPeople -- ?_currentPers,
			?_remainIngPers[ith(1) -> ?_nextPers]@\btp,
			// attempting to optimize
			//[?_nextPers] \subset ?_remainIngPers,
			%personToShiftCombo(?_nextPers(?_shifts)),
			?_singleListShifts[sort -> ?_singleListShiftsSorted]@\btp,
			?_shifts[sort -> ?_shiftsSorted]@\btp,
			//doesNotConitainDuplicateShift(?_singleListShiftsSorted, ?_shiftsSorted),
			?_matchingShifts \is ?_singleListShiftsSorted && ?_shiftsSorted,
			?_matchingShifts[length -> 0]@\btp,
			?_runningList \is ?tempList ++ [?_nextPers(?_shiftsSorted)],
			?_runningList[sort -> ?_sortedRunningList]@\btp,
			%uniquePersonShiftCombos(?_sortedRunningList, ?personShifts)
		).
*/	
eachPersonShiftCombo(?eachPersonShift) :-
 	?_tempList \is [],
	%uniquePersonShiftCombos(?_tempList, ?_eachPersonShiftUnsorted),
	?_eachPersonShiftUnsorted[sort -> ?eachPersonShift]@\btp.
	
identifyScore(?scoreShift) :-
	?scoreShift = setof{ ?_scoreShift(asc) | 
		eachPersonShiftCombo(?personShift), 
		%eachPersonShiftComboScore(?personShift, ?_score),
		?_scoreShift = ?_score(?personShift)
	}.
	
	
//determine Score
%eachPersonShiftComboScore(?personShift, ?score)	 :-
	
	?_preferenceCount = sum {  ?_score | 
		?_person(?_shifts) \in ?personShift, 
		?_shift \in ?_shifts, 
		preferenceScore(?_person, ?_shift, ?_score)
	},
	?_assignedCount = sum {  ?_score | 
		?(?_shifts) \in ?personShift, 
		?_shift \in ?_shifts, 
		shiftScore(?_shift, ?_score)
	},
	?_missingCount = sum {  ?_score | 		
		?_currentShifts = setof { ?_currShifts | 
			?(?_currShifts) \in ?personShift 
		},
		?_singleListShifts = setof{ ?_sShift | 
			?_currSingleShifts \in ?_currentShifts, 
			?_sShift \in ?_currSingleShifts 
		}, 
		missingShiftScore(?_singleListShifts, ?_score)
	},
	?_consistentSchedule = sum {  ?_score | 
		?_person(?_shifts) \in ?personShift,
		?_shiftOne \in ?_shifts,
		?_shiftTwo \in ?_shifts,
		consistentScheduleScore(?_shiftOne, ?_shiftTwo, ?_score)
	},
	?_evenDistributionScore = sum {  ?_score |
		%evenDistributionScore(?personShift, ?_score)
	},
	/*,
	?_noAssignedShiftsScore = sum {  ?_score |
		[?_person(?_shifts)] \subset ?personShift,
		noassignedShifts(?_person, ?_shifts, ?_score)
	},
	*/
	?score \is ( ?_preferenceCount + ?_assignedCount - ?_missingCount + ?_consistentSchedule + ?_evenDistributionScore)
	.
	
	
oneResultforEachPersonShiftCombo(?reults) :-
	?reults = setof{ ?_personShiftList  |  allShiftsToPerson(?_person, ?_shiftsLists),  ?_shiftList \subset ?_shiftsLists, ?_personShiftList = ?_person(?_shiftList) } .
	
	
// one result per person all Shifts
personOwnShiftCombos(?person(?shifts)) :-
	allShiftsToPerson(?person, ?shifts).

// Single result each grouped by person and a list of shifts	
singleListPersonShiftCombo(?personAllShifts) :-
	?personAllShifts = setof{ ?_personShifts | personOwnShiftCombos(?_personShifts)}.	
 
 /*
noEasyWayToDoThis(?person(?shifts), ?runningList, ?person, ?shifts) :-
	?_oPerson : Employee,
	allShiftsToPerson(?_person, ?_shifts),
	?_shift \subset ?_shifts,
*/	
	
	
	//to do
doesNotConitainDuplicateShift(?currentShifts, ?newShifts) :-
		(
			?currentShifts[length -> ?_X]@\btp,
			?_X == 0
		);
		(
			?newShifts[length -> ?_N]@\btp,
			?_N == 0
		);
		(
                  ?_numberOfMatchesCurrToNew =
                     count{ ?_S | ?_S \in ?currentShifts, ?_S \in ?newShifts},
                  ?_numberOfMatchesCurrToNew == 0
		).

/*

doesNotConitainDuplicateShift([twoMorningShift, thirdMorningShift, fourthMorningShift, oneMorningShift], [thirdLateShift, twoMorningShift]).

uniquePeopleShiftCombos(?personShifts) :-
	?personShifts = setof{ ?_personShift |
		personToUniqueShiftCombos(?_personShifts),
		(?_person(?_shifts)) \subset ?_personShifts
		

	}.
	 
*/	
	
/*	
listSplitter(?inputList, ?outputList) :-
	[?_X] \subset ?inputList,
	?_templist = ?inputList -- [?_X],
	?outputList = [?_templist, [?_X]]
	\if (
			?_templist[length -> ?_size],
			?_size >= 3
		)
	\then
		(
			listSplitter(?inputList, ?outputList)
		)
	\else
		(
		).
*/
		
// trying to think about how to find combinations of shifts assigned to people that are unique	
uniquePersonShifts(?person, ?shifts) :- 
	allShiftsToPerson(?person, ?shifts),
	\naf allShiftsToPerson(?_oPerson, ?shifts),
	?person !== ?_oPerson.


/*  This never worked 	
%assignAndCheckForConlifcts(?pickEmp, ?shift, ?_employees) :-	
	forall(?_Oshift)^( %winners(?pickEmp, ?_Oshift, ?) ~~> shiftsCanBeAssignedTogehter(?_Oshift, ?shift) ),
	insert{stealth{%winners(?pickEmp, ?shift, ?_employees)}}.
*/

/* 
approach to making a list based on the size of a different list for a while loop.
	compatableShifts(?employee, ?shift, ?compatablieShifts), 
?X = setof{ ?_Y | ?compatablieShifts[ith(?_Y) -> ?_D]@\btp }.

*/
/*  This is potentially too much work to solve.	
?employee[assignableShiftCombos -> ?shifts] :-
	compatibleShifts(?employee, ?_shift, ?_allShifts),
	(
		(
			?_allShifts[length -> 1]@\btp,
			?_allShifts[append([?_shift]) -> ?shifts]@\btp
		)
		
		;
		(
			?_allShifts[length -> ?_N]@\btp,
			?_N >= 2,
			ElemenateShift(?_allShifts, ?_N, ?_cleanerShifts),
			?_cleanerShifts[append([?_shift]) -> ?shifts]@\btp
		)
		
	).


attemptAtFacyWhile(?list, ?originalShifts, ?shifts) :-
	\while ?list >= 2
	\do ElemenateShift(?originalShifts, ?shifts, ?X, 1).

	
ElemenateShift(?originalShifts, ?shifts, ?X, ?Y) :-
	?originalShifts[ith(?X) -> ?_oShiftOne]@\btp,
	?originalShifts[ith(?Y) -> ?_oShiftTwo]@\btp,
	(
		(
			shiftsCanBeAssignedTogehter(?_oShiftTwo, ?_oShiftOne),
			?shifts = ?originalShifts
		);
		(
			\naf shiftsCanBeAssignedTogehter(?_oShiftTwo, ?_oShiftOne),
			?originalShifts[delete(?_oShiftOne) -> ?shifts]@\btp
		)
	).
		
		
	//?countHrs \is count{  ?_year(?_month(?_day(?_hour(?)))) | ?_Filler[timeObject ->  ?_year(?_month(?_day(?_hour(?))))]}.
/*	
	
	
/*TO-DO make this work

?employee[shiftCombo -> ?shifts[]] :-
	?employee : Employee, 
	shiftsAvailableForEmployee(?, ?employee, ?_shift),
	?shifts[length -> 0]@\btp,
	?shifts[append -> ?_shift].


%shiftDoesNotViolateCibstraints(?employee, ?shift) :-
	?_currentShifts = setof{ ?_shift |  %winners(?employee, ?shift, ?) },
	[?_someShift] \subset ?_currentShifts
	// new rule that accepts two shifts and returns true if they're on the same day.
*/		
/*	 

	
assignment(?shift, ?oEmployee) :-
	?employee = max{?_employees | allShiftsSet(?shift, ?_employees)},
	?oEmployee : Employee, 
	?oEmployee =:= ?employee.
	
		
AssignShifts(?shift),
	?_employee : Employee, 
	?shift : Shift, 
	\while
		%canBeAssigned(?_employee, ?shift)
	\do
		insert{stealth{%shifts(?_employee, ?shift)}}.
		
		
%canBeAssigned(?employee, ?shift) :-		
	(
		?shift : Shift,
		\naf %shifts(?_oEmployee, ?shift),
		shiftsAvailableForEmployee(?_hour, ?_day, ?employee, ?shift),
	).
*/	
		
